// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Q3DF.API.Models;

namespace Api.Migrations
{
    [DbContext(typeof(DefragContext))]
    partial class DefragContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("Q3DF.API.Models.Q3Access", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Cmd")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cmd")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.HasKey("Id");

                    b.ToTable("q3_access");
                });

            modelBuilder.Entity("Q3DF.API.Models.Q3DefragDemo", b =>
                {
                    b.Property<int>("RecId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rec_id");

                    b.Property<int>("Counter")
                        .HasColumnType("int")
                        .HasColumnName("counter");

                    b.Property<DateTime>("Datetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("datetime")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("filename")
                        .HasDefaultValueSql("''")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("Size")
                        .HasColumnType("int")
                        .HasColumnName("size");

                    b.HasKey("RecId")
                        .HasName("PRIMARY");

                    b.ToTable("q3_defrag_demos");
                });

            modelBuilder.Entity("Q3DF.API.Models.Q3DefragForbiddenMap", b =>
                {
                    b.Property<sbyte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("id");

                    b.Property<string>("Mapname")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("mapname")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("Timeout")
                        .HasColumnType("int")
                        .HasColumnName("timeout");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Mapname" }, "mapname")
                        .IsUnique();

                    b.ToTable("q3_defrag_forbidden_maps");

                    b
                        .HasComment("Players cannot vote these maps");
                });

            modelBuilder.Entity("Q3DF.API.Models.Q3DefragRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("DefragVersion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("defrag_version")
                        .HasDefaultValueSql("'19108'")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Map")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("map")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<bool>("Mode")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("mode");

                    b.Property<int>("Mstime")
                        .HasColumnType("int")
                        .HasColumnName("mstime");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nickname")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("O3jVersion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("o3j_version")
                        .HasDefaultValueSql("'1016'")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("Physic")
                        .HasColumnType("int")
                        .HasColumnName("physic");

                    b.Property<int>("ServerId")
                        .HasColumnType("int")
                        .HasColumnName("server_id");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int")
                        .HasColumnName("timestamp");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("Userinfostring")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("userinfostring")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ServerId", "UserId", "Map", "Mstime", "Physic", "Mode", "Timestamp", "Status" }, "idx");

                    b.HasIndex(new[] { "Map" }, "map");

                    b.HasIndex(new[] { "Map", "Physic", "Mode" }, "map_2");

                    b.HasIndex(new[] { "Mstime" }, "mstime");

                    b.HasIndex(new[] { "Map", "Physic", "Mode", "Mstime" }, "places");

                    b.HasIndex(new[] { "Timestamp" }, "timestamp");

                    b.HasIndex(new[] { "UserId", "Map", "Physic", "Mode" }, "user_id")
                        .IsUnique();

                    b.ToTable("q3_defrag_records");
                });

            modelBuilder.Entity("Q3DF.API.Models.Q3DefragRecordsHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("DefragVersion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("defrag_version")
                        .HasDefaultValueSql("'19108'")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Map")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("map")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<bool>("Mode")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("mode");

                    b.Property<int>("Mstime")
                        .HasColumnType("int")
                        .HasColumnName("mstime");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nickname")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("O3jVersion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("o3j_version")
                        .HasDefaultValueSql("'1016'")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("Physic")
                        .HasColumnType("int")
                        .HasColumnName("physic");

                    b.Property<int>("ServerId")
                        .HasColumnType("int")
                        .HasColumnName("server_id");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int")
                        .HasColumnName("timestamp");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("Userinfostring")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("userinfostring")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Map", "Physic", "Mode" }, "auth");

                    b.HasIndex(new[] { "Mstime" }, "mstime")
                        .HasDatabaseName("mstime1");

                    b.HasIndex(new[] { "ServerId" }, "server_id");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id1");

                    b.HasIndex(new[] { "UserId", "Physic", "Mode", "Map" }, "user_id_2");

                    b.HasIndex(new[] { "UserId", "Map", "Mstime", "Physic", "Mode" }, "user_id_3");

                    b.ToTable("q3_defrag_records_history");
                });

            modelBuilder.Entity("Q3DF.API.Models.Q3DefragRecordsTmp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("DefragVersion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("defrag_version")
                        .HasDefaultValueSql("'19108'")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Map")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("map")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<bool>("Mode")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("mode");

                    b.Property<int>("Mstime")
                        .HasColumnType("int")
                        .HasColumnName("mstime");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nickname")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("O3jVersion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("o3j_version")
                        .HasDefaultValueSql("'1016'")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("Physic")
                        .HasColumnType("int")
                        .HasColumnName("physic");

                    b.Property<int>("ServerId")
                        .HasColumnType("int")
                        .HasColumnName("server_id");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int")
                        .HasColumnName("timestamp");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("Userinfostring")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("userinfostring")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.HasKey("Id");

                    b.ToTable("q3_defrag_records_tmp");
                });

            modelBuilder.Entity("Q3DF.API.Models.Q3IpToCountry", b =>
                {
                    b.Property<string>("Drei")
                        .IsRequired()
                        .HasColumnType("char(3)")
                        .HasColumnName("drei")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<double>("IpFrom")
                        .HasColumnType("double")
                        .HasColumnName("IP_from");

                    b.Property<double>("IpTo")
                        .HasColumnType("double")
                        .HasColumnName("IP_to");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Zwei")
                        .IsRequired()
                        .HasColumnType("char(2)")
                        .HasColumnName("zwei")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.ToTable("q3_ip_to_country");
                });

            modelBuilder.Entity("Q3DF.API.Models.Q3MinnieRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Mapname")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("mapname")
                        .HasDefaultValueSql("''")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<ushort>("Physic")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("physic");

                    b.Property<string>("Playername")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(32)")
                        .HasColumnName("playername")
                        .HasDefaultValueSql("''")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("Rank")
                        .HasColumnType("int")
                        .HasColumnName("rank");

                    b.Property<uint>("Rectime")
                        .HasColumnType("int unsigned")
                        .HasColumnName("rectime");

                    b.Property<DateTime>("Ts")
                        .HasColumnType("datetime")
                        .HasColumnName("ts");

                    b.Property<string>("Visname")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(96)")
                        .HasColumnName("visname")
                        .HasDefaultValueSql("''")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Mapname" }, "mapname")
                        .HasDatabaseName("mapname1");

                    b.HasIndex(new[] { "Mapname", "Physic" }, "mapname_2");

                    b.HasIndex(new[] { "Physic" }, "physic");

                    b.HasIndex(new[] { "Playername" }, "playername");

                    b.HasIndex(new[] { "Rank" }, "rank");

                    b.HasIndex(new[] { "Rectime" }, "rectime");

                    b.HasIndex(new[] { "Ts" }, "ts");

                    b.ToTable("q3_minnie_records");
                });

            modelBuilder.Entity("Q3DF.API.Models.Q3News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("content")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("datetime")
                        .HasColumnName("datetime");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("headline")
                        .HasDefaultValueSql("''")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<bool>("Locked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("locked");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId", "Datetime" }, "user_id")
                        .HasDatabaseName("user_id2");

                    b.ToTable("q3_news");
                });

            modelBuilder.Entity("Q3DF.API.Models.Q3NewsComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("comment")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("datetime")
                        .HasColumnName("datetime");

                    b.Property<int>("Delete")
                        .HasColumnType("int")
                        .HasColumnName("delete");

                    b.Property<int>("NewsId")
                        .HasColumnType("int")
                        .HasColumnName("news_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NewsId", "UserId", "Datetime" }, "news_id");

                    b.ToTable("q3_news_comments");
                });

            modelBuilder.Entity("Q3DF.API.Models.Q3Pinboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool>("Del")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("del");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("message")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int")
                        .HasColumnName("timestamp");

                    b.Property<int>("Uid")
                        .HasColumnType("int")
                        .HasColumnName("uid");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Timestamp" }, "timestamp")
                        .HasDatabaseName("timestamp1");

                    b.HasIndex(new[] { "Uid" }, "uid");

                    b.ToTable("q3_pinboard");
                });

            modelBuilder.Entity("Q3DF.API.Models.Q3Server", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<byte>("Del")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("del");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(6)")
                        .HasColumnName("flag")
                        .HasDefaultValueSql("'noflag'")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("ip")
                        .HasDefaultValueSql("''")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("Port")
                        .HasColumnType("int")
                        .HasColumnName("port");

                    b.Property<string>("Rcon")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("rcon")
                        .HasDefaultValueSql("''")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.HasKey("Id");

                    b.ToTable("q3_servers");
                });

            modelBuilder.Entity("Q3DF.API.Models.Q3ServersAccess", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("ServerId")
                        .HasColumnType("int")
                        .HasColumnName("server_id");

                    b.Property<int>("AccessBits")
                        .HasColumnType("int")
                        .HasColumnName("access_bits");

                    b.HasKey("UserId", "ServerId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("q3_servers_access");
                });

            modelBuilder.Entity("Q3DF.API.Models.Q3ServersAccessLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AccessId")
                        .HasColumnType("int")
                        .HasColumnName("access_id");

                    b.Property<string>("Parameter")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("parameter")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("ServerId")
                        .HasColumnType("int")
                        .HasColumnName("server_id");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int")
                        .HasColumnName("timestamp");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AccessId" }, "access_id");

                    b.HasIndex(new[] { "ServerId" }, "server_id")
                        .HasDatabaseName("server_id1");

                    b.HasIndex(new[] { "Timestamp" }, "timestamp")
                        .HasDatabaseName("timestamp2");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id3");

                    b.ToTable("q3_servers_access_log");
                });

            modelBuilder.Entity("Q3DF.API.Models.Q3ServersBannedMap", b =>
                {
                    b.Property<string>("Mapname")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("mapname")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.HasKey("Mapname")
                        .HasName("PRIMARY");

                    b.ToTable("q3_servers_banned_maps");
                });

            modelBuilder.Entity("Q3DF.API.Models.Q3ServersStatus", b =>
                {
                    b.Property<int>("ServerId")
                        .HasColumnType("int")
                        .HasColumnName("server_id");

                    b.Property<int>("CurPlayers")
                        .HasColumnType("int")
                        .HasColumnName("cur_players");

                    b.Property<string>("Map")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("map")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("int")
                        .HasColumnName("max_players");

                    b.Property<int>("Mode")
                        .HasColumnType("int")
                        .HasColumnName("mode");

                    b.Property<string>("NameColors")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_colors")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("Physic")
                        .HasColumnType("int")
                        .HasColumnName("physic");

                    b.Property<int>("Speedaward")
                        .HasColumnType("int")
                        .HasColumnName("speedaward");

                    b.Property<string>("SpeedawardName")
                        .IsRequired()
                        .HasColumnType("varchar(34)")
                        .HasColumnName("speedaward_name")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.HasKey("ServerId")
                        .HasName("PRIMARY");

                    b.ToTable("q3_servers_status");
                });

            modelBuilder.Entity("Q3DF.API.Models.Q3ServersStatusPlayer", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("int")
                        .HasColumnName("player_id");

                    b.Property<int>("ServerId")
                        .HasColumnType("int")
                        .HasColumnName("server_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("country")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<bool>("HasSpeedaward")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_speedaward");

                    b.Property<bool>("IsSpectated")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_spectated");

                    b.Property<int>("Mstime")
                        .HasColumnType("int")
                        .HasColumnName("mstime");

                    b.Property<string>("NameColors")
                        .IsRequired()
                        .HasColumnType("varchar(35)")
                        .HasColumnName("name_colors")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("Ping")
                        .HasColumnType("int")
                        .HasColumnName("ping");

                    b.Property<string>("SpectatorName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(34)")
                        .HasColumnName("spectator_name")
                        .HasDefaultValueSql("'-1'")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.HasKey("PlayerId", "ServerId", "UserId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("q3_servers_status_players");
                });

            modelBuilder.Entity("Q3DF.API.Models.Q3TypeCountry", b =>
                {
                    b.Property<string>("Two")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("two")
                        .HasDefaultValueSql("''")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Three")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(4)")
                        .HasColumnName("three")
                        .HasDefaultValueSql("''")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.HasKey("Two")
                        .HasName("PRIMARY");

                    b.ToTable("q3_type_countrys");
                });

            modelBuilder.Entity("Q3DF.API.Models.Q3User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("avatar")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<bool>("BackendUser")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("backend_user");

                    b.Property<int>("Boardid")
                        .HasColumnType("int")
                        .HasColumnName("boardid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Country")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("country")
                        .HasDefaultValueSql("''")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Dateformat")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("dateformat")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<bool>("Del")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("del");

                    b.Property<int>("EloStartWert")
                        .HasColumnType("int")
                        .HasColumnName("elo_start_wert");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Hardware")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("hardware")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("LastActive")
                        .HasColumnType("int")
                        .HasColumnName("last_active");

                    b.Property<DateTime>("LastChange")
                        .HasColumnType("datetime")
                        .HasColumnName("last_change");

                    b.Property<int>("LastLogin")
                        .HasColumnType("int")
                        .HasColumnName("last_login");

                    b.Property<string>("Newpw")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("newpw")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Newpwkey")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("newpwkey")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("OldUsername")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("old_username")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Password")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password")
                        .HasDefaultValueSql("''")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("Serverid")
                        .HasColumnType("int")
                        .HasColumnName("serverid");

                    b.Property<string>("Sessionid")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("sessionid")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("StripVisname")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strip_visname")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("Timezone")
                        .HasColumnType("int")
                        .HasColumnName("timezone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username")
                        .HasDefaultValueSql("''")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Visname")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("visname")
                        .HasDefaultValueSql("''")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<byte>("WikiAdmin")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("wiki_admin");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "StripVisname" }, "strip_visname")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "username");

                    b.HasIndex(new[] { "Visname" }, "visname");

                    b.ToTable("q3_users");
                });

            modelBuilder.Entity("Q3DF.API.Models.Q3UsersCopy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("avatar")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<bool>("BackendUser")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("backend_user");

                    b.Property<int>("Boardid")
                        .HasColumnType("int")
                        .HasColumnName("boardid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Country")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("country")
                        .HasDefaultValueSql("''")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Dateformat")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("dateformat")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<bool>("Del")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("del");

                    b.Property<int>("EloStartWert")
                        .HasColumnType("int")
                        .HasColumnName("elo_start_wert");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Hardware")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("hardware")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("LastActive")
                        .HasColumnType("int")
                        .HasColumnName("last_active");

                    b.Property<int>("LastLogin")
                        .HasColumnType("int")
                        .HasColumnName("last_login");

                    b.Property<string>("OldUsername")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("old_username")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Password")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password")
                        .HasDefaultValueSql("''")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("Serverid")
                        .HasColumnType("int")
                        .HasColumnName("serverid");

                    b.Property<string>("Sessionid")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("sessionid")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("StripVisname")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strip_visname")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("Timezone")
                        .HasColumnType("int")
                        .HasColumnName("timezone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username")
                        .HasDefaultValueSql("''")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Visname")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("visname")
                        .HasDefaultValueSql("''")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<byte>("WikiAdmin")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("wiki_admin");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "StripVisname" }, "strip_visname")
                        .IsUnique()
                        .HasDatabaseName("strip_visname1");

                    b.HasIndex(new[] { "Username" }, "username")
                        .HasDatabaseName("username1");

                    b.HasIndex(new[] { "Visname" }, "visname")
                        .HasDatabaseName("visname1");

                    b.ToTable("q3_users_copy");
                });

            modelBuilder.Entity("Q3DF.API.Models.Q3UsersOnline", b =>
                {
                    b.Property<int>("Uid")
                        .HasColumnType("int")
                        .HasColumnName("uid");

                    b.Property<string>("Sessionid")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("sessionid")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("RequestUri")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("request_uri")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int")
                        .HasColumnName("timestamp");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("user_agent")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.HasKey("Uid", "Sessionid")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("q3_users_online");
                });

            modelBuilder.Entity("Q3DF.API.Models.Q3UsersRight", b =>
                {
                    b.Property<int>("Uid")
                        .HasColumnType("int")
                        .HasColumnName("uid");

                    b.Property<bool>("CanAddMddrecords")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_add_mddrecords");

                    b.Property<bool>("CanNewsAdd")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_news_add");

                    b.Property<bool>("CanNewsCommentDel")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_news_comment_del");

                    b.Property<bool>("CanNewsDel")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_news_del");

                    b.Property<bool>("CanNewsEdit")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_news_edit");

                    b.Property<bool>("CanRecsDel")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_recs_del");

                    b.Property<bool>("CanRights")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_rights");

                    b.Property<bool>("CanUserAdd")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_user_add");

                    b.Property<bool>("CanUserDel")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_user_del");

                    b.Property<bool>("CanUserEdit")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_user_edit");

                    b.HasKey("Uid")
                        .HasName("PRIMARY");

                    b.ToTable("q3_users_rights");
                });

            modelBuilder.Entity("Q3DF.API.Models.Q3UsersVote", b =>
                {
                    b.Property<int>("VoteId")
                        .HasColumnType("int")
                        .HasColumnName("vote_id");

                    b.Property<int>("AnswerId")
                        .HasColumnType("int")
                        .HasColumnName("answer_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int")
                        .HasColumnName("timestamp");

                    b.HasKey("VoteId", "AnswerId", "UserId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("q3_users_votes");
                });

            modelBuilder.Entity("Q3DF.API.Models.Q3Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("DateFrom")
                        .HasColumnType("int")
                        .HasColumnName("date_from");

                    b.Property<int>("DateTo")
                        .HasColumnType("int")
                        .HasColumnName("date_to");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.HasKey("Id");

                    b.ToTable("q3_votes");
                });

            modelBuilder.Entity("Q3DF.API.Models.Q3VotesAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("answer")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("VoteId")
                        .HasColumnType("int")
                        .HasColumnName("vote_id");

                    b.HasKey("Id");

                    b.ToTable("q3_votes_answer");
                });

            modelBuilder.Entity("Q3DF.API.Models.Q3WikiPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("active");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("Lft")
                        .HasColumnType("int")
                        .HasColumnName("lft");

                    b.Property<int>("Lvl")
                        .HasColumnType("int")
                        .HasColumnName("lvl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.Property<int>("Rgt")
                        .HasColumnType("int")
                        .HasColumnName("rgt");

                    b.Property<int?>("Root")
                        .HasColumnType("int")
                        .HasColumnName("root");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ParentId" }, "IDX_8C939A1A727ACA70");

                    b.ToTable("q3_wiki_pages");
                });

            modelBuilder.Entity("Q3DF.API.Models.Tmp", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int?>("Boardid")
                        .HasColumnType("int")
                        .HasColumnName("boardid");

                    b.Property<int?>("CountComments")
                        .HasColumnType("int")
                        .HasColumnName("count_comments");

                    b.Property<int?>("CountPosts")
                        .HasColumnType("int")
                        .HasColumnName("count_posts");

                    b.Property<int?>("CountRecords")
                        .HasColumnType("int")
                        .HasColumnName("count_records");

                    b.Property<int?>("CountRecordsHistory")
                        .HasColumnType("int")
                        .HasColumnName("count_records_history");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email")
                        .UseCollation("utf8_bin")
                        .HasCharSet("utf8");

                    b.Property<string>("Username")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username")
                        .UseCollation("utf8_bin")
                        .HasCharSet("utf8");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.ToTable("tmp");
                });

            modelBuilder.Entity("Q3DF.API.Models.Q3WikiPage", b =>
                {
                    b.HasOne("Q3DF.API.Models.Q3WikiPage", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_8C939A1A727ACA70")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Q3DF.API.Models.Q3WikiPage", b =>
                {
                    b.Navigation("InverseParent");
                });
#pragma warning restore 612, 618
        }
    }
}
